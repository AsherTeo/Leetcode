class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def sametree(roots):
            stack = [(roots, subRoot)]

            while stack:
                node1, node2 = stack.pop()
                
                if node1 is None and node2 is None:
                    continue
                if node1 is None or node2 is None or node1.val != node2.val:
                    return False

                stack.append((node1.right, node2.right))
                stack.append((node1.left, node2.left))

            return True

###################### Pre Order Transverse each node ###################

        stack = [root]

        while stack:
            node = stack.pop()

            ans = sametree(node)
            if ans:
                return True
                
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return False
