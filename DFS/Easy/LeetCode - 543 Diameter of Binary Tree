#################################################################################### Recursion ########################################

class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        self.longest = 0

        def dfs(node):
            if not node:
                return 0

            left = dfs(node.left)
            right = dfs(node.right)

            self.longest = max(self.longest, left + right)

            return max(left, right) + 1
        
        dfs(root)
        return self.longest

#################################################################################### Iterative ########################################

class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        stack = [(root, False)]
        max_diameter = 0
        hash_map = {None: 0}

        while stack:
            node, state = stack.pop()

            if node:
                if state:
                    left = hash_map[node.left]
                    right = hash_map[node.right]
                    max_diameter = max(max_diameter, left + right)
                    hash_map[node] = max(left, right) + 1
                else:
                    stack.append((node, True))
                    stack.append((node.right, False))
                    stack.append((node.left, False))
        return max_diameter
