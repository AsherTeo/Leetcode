
################################################################## Recursion ###############################################

class Solution:
    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:
        self.sum = 0

        def dfs(node, isleft):
            if not node:
                return 

            if node.left is None and node.right is None and isleft:
                self.sum += node.val
            dfs(node.left, True)
            dfs(node.right, False)

        dfs(root, False)
        return self.sum

################################################################## Iterative ###############################################

class Solution:
    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:
        stack = [(root, root.val)]
        total = 0

        while stack:
            node, value = stack.pop()

            if node.left and node.left.left is None and node.left.right is None:
                total += node.left.val
            if node.right:
                stack.append((node.right, node.right.val))
            if node.left:
                stack.append((node.left, node.left.val))
        return total
