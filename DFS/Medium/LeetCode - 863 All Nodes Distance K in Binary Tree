class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:

        hash_map = defaultdict(list)
        stack = [(root, None)]
        
        while stack:
            node, parent = stack.pop()
            if parent:
                hash_map[node.val].append(parent.val)

            if node.right:
                stack.append((node.right, node))
                hash_map[node.val].append(node.right.val)
            if node.left:
                stack.append((node.left, node))
                hash_map[node.val].append(node.left.val)

        stack1 = [(target.val, 0)]
        seen = set()
        res = []

        while stack1:
            val, count = stack1.pop()
            seen.add(val)
            if count == k:
                res.append(val)
            elif count < k:
                for num in hash_map[val]:
                    if num not in seen:
                        stack1.append((num, count + 1))
        return res
