class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        self.border = set()
        self.count = 0

        rows = len(grid)
        cols = len(grid[0])

        def dfs(i,j):
            if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] == 1 or (i, j) in self.border:
                return

            self.border.add((i,j))

            dfs(i + 1, j)
            dfs(i - 1, j)
            dfs(i, j + 1)
            dfs(i, j - 1)

        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 0 and (i, j) not in self.border and (i == 0 or i == rows - 1 or j == 0 or j == cols - 1):
                    dfs(i,j)
        
        for i in range(rows):
            for j in range(cols):
                if (i, j) not in self.border and grid[i][j] == 0:
                    self.count += 1
                    dfs(i,j)
        return self.count
