
#################################################################### Better ###############################################################

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        stack = [(root, None)]
        hash_map = Counter()
        seen = set()

        while stack:
            node, parent = stack.pop()
            hash_map[node] = parent

            if node.right:
                stack.append((node.right, node))
            if node.left:
                stack.append((node.left, node))

        while p:
            seen.add(p)
            p = hash_map[p]
        
        while q not in seen:
            q = hash_map[q]

        return q

################################################################# Not optimal ###############################################################

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def find_path(target):
            stack = [(root, [root])]
            
            while stack:
                node, path = stack.pop()

                if node.val == target.val:
                    return path

                if node.right:
                    stack.append((node.right, path + [node.right]))

                if node.left:
                    stack.append((node.left, path + [node.left]))
        
        p_path = find_path(p)[::-1]
        q_path = find_path(q)[::-1]
        
        for i in range(len(p_path)):
            for j in range(len(q_path)):
                if p_path[i] == q_path[j]:
                    return p_path[i]
