
############################################## Iterative ###########################################################

class Solution:
    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:
        stack = [(root, False)]
        res = []
        hash_map= {}
        freq = defaultdict(int)

        while stack:
            node, state = stack.pop()
            left, right = 0, 0
            if node:
                if state:
                   left = hash_map.get(node.left, 0)
                   right = hash_map.get(node.right, 0)

                   hash_map[node] = left + right + node.val

                else:
                    stack.append((node, True))
                    stack.append((node.right, False))
                    stack.append((node.left, False))
        
        for sum_val in hash_map.values():
            freq[sum_val] += 1
        
        return [key for key, val in freq.items() if val == max(freq.values())]

############################################## Recursion ###########################################################

class Solution:
    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:
        self.res = []
        
        def dfs(node):
            
            if node is None:
                return 0

            left = dfs(node.left)
            right = dfs(node.right)
            self.res.append(left + right + node.val)
            return left + right + node.val

        dfs(root)
        freq = Counter(self.res)
        return [key for key, val in freq.items() if val == max(freq.values())]
