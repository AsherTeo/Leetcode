class Solution:
    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:
        to_delete = set(to_delete)
        stack = [(root, False)]
        res = []
        val = root.val
        while stack:
            node, state = stack.pop()
            if node:
                if state:
                    if node.left and node.left.val in to_delete:
                        res.append(node.left.left)
                        res.append(node.left.right)
                        node.left = None
                        
                    if node.right and node.right.val in to_delete:
                        res.append(node.right.left)
                        res.append(node.right.right)
                        node.right = None
                else:
                    stack.append((node, True))
                    stack.append((node.right, False))
                    stack.append((node.left, False))

        if root.val in to_delete:
            if root.left:
                res.append(root.left)
            if root.right:
                res.append(root.right)
            root = None
        else:
            res.append(root)
        res = [lst for lst in res if lst]
        return res
