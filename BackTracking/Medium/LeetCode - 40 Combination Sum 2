class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        temp = []

        candidates.sort()

        def backtracking(i, cur_sum):
            if cur_sum == target:
                res.append(temp[:])
                return

            used = set()

            for j in range(i, len(candidates)):
                if candidates[j] > target:
                    break
                if candidates[j] in used or cur_sum > target:
                    continue
                temp.append(candidates[j])
                used.add(candidates[j])
                backtracking(j + 1, cur_sum + candidates[j])
                temp.pop()

        backtracking(0, 0)
        return res
