class LRUCache:

    def __init__(self, capacity: int):
        self.hashmap = OrderedDict()
        self.length = capacity

    def get(self, key: int) -> int:
        
        while len(self.hashmap) > self.length:
            self.hashmap.popitem(last = False)
            
        if key not in self.hashmap:
            return -1
        
        res = self.hashmap[key]
        self.put(key, res)
        
        return res
        
    def put(self, key: int, value: int) -> None:
        if key in self.hashmap:
            self.hashmap.move_to_end(key)
        self.hashmap[key] = value
