class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        count = 0
        

        def isValid(matrix):
            n = len(matrix)
            m = len(matrix[0])
            seen = set()
            target = sum(matrix[0])

            for row in range(n):
                if sum(matrix[row]) != target:
                    return False
            
            for j in range(n):
                col = [row[j] for row in matrix]
                if sum(col) != target:
                    return False

            diagonal, anti_diagonal,  = 0, 0
            
            for i in range(n):
                for j in range(m):
                    if matrix[i][j] > 9 or matrix[i][j] < 1:
                        return False 
                    if matrix[i][j] in seen:
                        return False
                    if i - j == 0:
                        diagonal += matrix[i][j]
                    if i + j == 2:
                        anti_diagonal += matrix[i][j]
                    seen.add(matrix[i][j])

            if diagonal != target or anti_diagonal != target:
                return False

            return True

        for i in range(n-2):
            for j in range(m-2):
                matrix = [[0] * 3 for _ in range(3)]
                for x in range(i, i + 3):
                    for y in range(j, j + 3):
                        matrix[x - i][y- j] = grid[x][y]
                if isValid(matrix):
                    count += 1
        return count
