#################################################### Better ##############################

class Solution(object):
    def findErrorNums(self, nums):
        hash_map = Counter(nums)
        for k, v in hash_map.items():
            if v == 2:
                first_num = k
        n = len(nums)
        sum_of_n = (n * (n+1))//2
        sum_of_nums = sum(nums) - first_num
        missing_no = sum_of_n - sum_of_nums
        return [first_num, missing_no]

################################################ Too slow #########################

class Solution(object):
    def findErrorNums(self, nums):
        hash_map = {}
        for num in nums:
            if num in hash_map:
                hash_map[num] += 1
            else:
                hash_map[num] = 1
        
        res = [k for k, v in hash_map.items() if v == 2]
        
        for i in range(1, len(nums) + 1):
            if i not in nums:
                res.append(i)
                
        return res
