class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        
        graph = defaultdict(list)

        for u, v, w in edges:
            graph[u].append((v, w))
            graph[v].append((u, w))

        shortest = {}

        for i in range(n):
            min_heap = [(0, i)]
            
            visited = set()

            city = 0
            while min_heap:
                cost, node = heapq.heappop(min_heap)

                if node in visited or cost > distanceThreshold:
                    continue

                visited.add(node)
                
                for nei, cur_cost in graph[node]:
                    if nei not in visited:
                        heapq.heappush(min_heap, (cur_cost + cost, nei))
                
            shortest[i] = len(visited) - 1

        min_val = min(shortest.values())

        ans = float('-inf')

        for k, v in shortest.items():
            if v == min_val:
                ans = max(ans, k)
        return ans
