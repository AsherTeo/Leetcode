####################### DFS Approch ############################################

class Solution(object):
    def searchBST(self, root, val):
        if root is None:
            return None
        if val < root.val:
            return self.searchBST(root.left, val)
        if val > root.val:
            return self.searchBST(root.right, val)
        else:
            return root

######################### BFS Approch ######################################
class Solution(object):
    def searchBST(self, root, val):
        if root is None:
            return None
        queue = deque()
        queue.append(root)

        while queue:
            
            node = queue.popleft()
            if val == node.val:
                return node
            if node.left: 
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
      
        return None

