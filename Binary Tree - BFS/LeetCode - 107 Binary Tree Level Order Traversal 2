######################################################## Method 1 #######################################

class Solution(object):
    def levelOrderBottom(self, root):
        if root is None:
            return None
        queue = deque()
        queue.append(root)
        res = []
        while queue:
            curr = []
            n_queue = len(queue)
            for i in range (n_queue):
                node = queue.popleft()
                curr.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            res.append(curr)
        return res[::-1]

######################################################## Method 2 #######################################

class Solution(object):
    def levelOrderBottom(self, root):
        if root is None:
            return []
        queue = deque()
        queue.append(root)
        res = []
        while queue:
            curr = []
            for i in range(len(queue)):
                node = queue.popleft()
                curr.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            if res is None:
                res.append(curr) 
            res.insert(0, curr)
        return res
