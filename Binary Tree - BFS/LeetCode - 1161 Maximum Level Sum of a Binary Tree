########################################################## Second Attempt ################################

class Solution(object):
    def maxLevelSum(self, root):
        queue = deque([(root, 1)])
        level_sums  = {}
        while queue:
            curr_sum = 0
            for i in range(len(queue)):
                node, level = queue.popleft()
                if level in level_sums:
                    level_sums[level] += node.val
                else:
                    level_sums[level] = node.val
                if node.left:
                    queue.append((node.left, level + 1))
                if node.right:
                    queue.append((node.right, level + 1))

        max_values = max(level_sums.values())   
        return [keys for keys, values in level_sums.items() if values == max_values][0]

########################################################## First Attempt ################################

import numpy as np
class Solution(object):
    def maxLevelSum(self, root):
        queue = deque()
        queue.append(root)
        lst = []
        while queue:
            curr = []
            for i in range(len(queue)):
                node = queue.popleft()
                curr.append(node.val)
                sum_curr = sum(curr)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            lst.append(sum_curr)
      
        return np.argmax(lst) + 1


