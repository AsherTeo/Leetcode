class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        rows , cols = len(grid), len(grid[0])
        
        if grid[0][0] == 1 or grid[rows - 1][cols - 1] == 1:
            return -1
        if len(grid) == 1 and grid[0][0] == 0:
            return 1

        self.visit = set()
        q = deque([(0,0)])
        count = 1

        directions = [[0,1], [1,0], [0, -1], [-1, 0],
                      [1,1], [-1, -1], [1, -1], [-1, 1]]

        while q:
            count += 1
            for _ in range(len(q)):
                r, c = q.popleft()
                for x, y in directions:
                    row, col = x + r, y + c
                    if 0 <= row < rows and 0 <= col < cols and grid[row][col] == 0 and (row, col) not in self.visit:
                        if row == rows - 1 and col == cols - 1:
                            return count
                        q.append((row, col))
                        self.visit.add((row, col))
                
        return -1
