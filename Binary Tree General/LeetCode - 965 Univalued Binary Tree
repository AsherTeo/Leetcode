############################################################### DFS Recursive #######################################################

class Solution(object):
    def isUnivalTree(self, root):
        def dfs(node, target):
            if node is None:
                return True
            
            if node.val != target:
                return False

            left = dfs(node.left, target)
            right = dfs(node.right, target)

            return left and right
        return dfs(root, root.val)

########################################################################### BFS #######################################################

class Solution(object):
    def isUnivalTree(self, root):
        if root is None:
            return True
        
        queue = deque([root])
        root_val = root.val
        
        while queue:
            node = queue.popleft()
            if node.val != root_val:
                return False
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        
        return True


