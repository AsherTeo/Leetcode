############################################################ DFS Recursive ###########################################

class Solution(object):
    def preorderTraversal(self, root): 
        # Root, Left, Right
        def dfs(node, res):
            if node is None:
                return None
            res.append(node.val)
            dfs(node.left, res)
            dfs(node.right, res)
            return res
        return dfs(root, [])

############################################################ DFS Iterative ###########################################

class Solution(object):
    def preorderTraversal(self, root): 
        # Root, Left, Right
        if root is None:
            return None
        stack = [(root, root.val)]
        res = []

        while stack:
            node, val = stack.pop()
            res.append(val)
            if node.right:
                stack.append((node.right, node.right.val))
            if node.left:
                stack.append((node.left, node.left.val))

        return res
