############################################################################## DFS Recursive ####################################################

class Solution(object):
    def leafSimilar(self, root1, root2):
        def dfs(node, res):
            if node is None:
                return True
            if node.left is None and node.right is None:
                res.append(node.val)
            left = dfs(node.left, res)
            right = dfs(node.right, res)
            return res
        return dfs(root1, []) == dfs(root2, [])

############################################################################## DFS Iterative ####################################################

class Solution(object):
    def leafSimilar(self, root1, root2):
        def dfs(root):
            stack = [(root, root.val)]
            res = []
            while stack:
                node, value = stack.pop()
                if node.left is None and node.right is None:
                    res.append(value)
                if node.left:
                    stack.append((node.left, node.left.val))
                if node.right:
                    stack.append((node.right, node.right.val))
            return res
        return (dfs(root1) == dfs(root2))
