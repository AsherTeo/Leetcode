##################################### DFS Approach Recursive #################################

class Solution(object):
    def isSameTree(self, p, q):
        if p is None and q is None:
            return True
        if p is None or q is None:
            return False
        if p.val != q.val:
            return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

##################################### DFS Approach Pre Order #################################

class Solution(object):
    def isSameTree(self, p, q):
        def dfs(root):
            if root is None:
                return [None]

            element = [] # (Root, Left, Right)
            element.append(root.val)
            element.extend(dfs(root.left))
            element.extend(dfs(root.right))
            return element
        return (dfs(p) == dfs(q))

################################### BFS Approach #####################################

class Solution(object):
    def isSameTree(self, p, q):
        def bfs(root):
            if root is None:
                return [None]

            queue = deque()
            queue.append(root)
            res = []
            while queue:
                node = queue.popleft()
                if node:
                    res.append(node.val)
                    queue.append(node.left)
                    queue.append(node.right)
                else:
                    res.append(None)
            return res
        return (bfs(p) == bfs(q))
