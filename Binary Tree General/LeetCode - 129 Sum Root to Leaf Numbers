################################################# DFS Iterative Method 1 ##############################################

class Solution(object):
    def sumNumbers(self, root):
        if not root:
            return 0
        sum = 0
        stack = [(root, str(root.val))]
        res = []
        while stack:
            node, path = stack.pop()
            if node.left is None and node.right is None:
                res.append(path)
               
            if node.left:
                stack.append((node.left, path + str(node.left.val)))
            if node.right:
                stack.append((node.right, path + str(node.right.val)))

        for i in res:
            i = int(i)
            sum += i
        return sum
################################################# DFS Iterative Method 2 ##############################################

class Solution(object):
    def sumNumbers(self, root):
        if not root:
            return 0
    
        stack = [(root, root.val)]
        res = []
        while stack:
            node, path = stack.pop()
            if node.left is None and node.right is None:
                res.append(path)
               
            if node.left:
                stack.append((node.left, path * 10 + node.left.val))
            if node.right:
                stack.append((node.right, path * 10 + node.right.val))
        return sum(res)

################################################# DFS Recursive Method 1 ############################################## 

class Solution(object):
    def sumNumbers(self, root):
        def dfs(root, cur_sum):
            res = []
            if root is None:
                return 0

            cur_sum = cur_sum * 10 + root.val
            
            if root.left is None and root.right is None:
                return cur_sum

            return dfs(root.left, cur_sum) + dfs(root.right, cur_sum)

        return dfs(root, 0)
