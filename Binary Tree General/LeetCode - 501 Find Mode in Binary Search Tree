
######################################################## DFS Recursive global dictionary ##################################################

class Solution(object):
    def findMode(self, root):
        self.mode_dict = {}
        def dfs(node):
            if node is None:
                return None
            if node.val not in self.mode_dict:
                self.mode_dict[node.val] = 1
            else:
                self.mode_dict[node.val] += 1
            left = dfs(node.left)
            right = dfs(node.right)
        dfs(root)
        max_values = max(self.mode_dict.values())
        return [key for key, value in self.mode_dict.items() if value == max_values]


######################################################## DFS Recursive collection dictionary ##################################################

from collections import Counter

class Solution(object):
    def findMode(self, root):
        def in_order_dfs(node, res):
            if node is None:
                return None
            res.append(node.val)
            in_order_dfs(node.left, res)
            in_order_dfs(node.right, res)
            return res
        lst = in_order_dfs(root, [])
        counter = Counter(lst)
        max_count = max(counter.values())
        mode = [k for k,v in counter.items() if v == max_count]
        return mode
