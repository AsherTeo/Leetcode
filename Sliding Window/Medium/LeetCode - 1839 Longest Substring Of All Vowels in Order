class Solution:
    def longestBeautifulSubstring(self, word: str) -> int:
        l = 0
        r = 0
        max_count = 0

        def find_a(l):
            while l < len(word) and word[l] != 'a':
                l += 1
            return l,l
 
        while r < len(word):
            
            if word[r] == 'a':
                if r + 1 < len(word) and (word[r + 1] == 'a' or word[r + 1] == 'e'):
                    r += 1
                else:
                    l = r + 1
                    l, r = find_a(l)

            elif word[r] == 'e':
                if r + 1 < len(word) and (word[r + 1] == 'e' or word[r + 1] == 'i'):
                    r += 1
                else:
                    l = r + 1
                    l, r = find_a(l)

            elif word[r] == 'i':
                if r + 1 < len(word) and (word[r + 1] == 'i' or word[r + 1] == 'o'):
                    r += 1
                else:
                    l = r + 1
                    l, r = find_a(l)
                    
            elif word[r] == 'o':
                if r + 1 < len(word) and (word[r + 1] == 'o' or word[r + 1] == 'u'):
                    r += 1
                else:
                    l = r + 1
                    l, r = find_a(l)

            elif word[r] == 'u':
                if r + 1 < len(word) and (word[r + 1] == 'u'):
                    r += 1
                else:
                    if word[l] == 'a':
                        max_count = max(max_count, r - l + 1)
                    l = r + 1
                    l, r = find_a(l)

        return max_count
