
############################################################### Better #######################################################

class Solution:
    def minSwaps(self, nums: List[int]) -> int:

        target = sum(nums)
        first = sum(nums[:target])

        min_count = target - first
        count = min_count
        nums += nums[:len(nums)//2 + 1]
        l = 0

        for r in range(target, len(nums)):
            if nums[r] == 0:
                count += 1
            if nums[l] == 0:
                count -= 1
            l += 1
            min_count = min(min_count, count)
        return min_count


########################################################### Slower ###############################################

class Solution:
    def minSwaps(self, nums: List[int]) -> int:
        num_of_ones = nums.count(1)
        nums += nums[:num_of_ones]

        l = 0
        min_count = float('inf')
        hash_map = Counter()

        for r in range(len(nums)):
            hash_map[nums[r]] += 1

            if r - l == num_of_ones:
                hash_map[nums[l]] -= 1
                if hash_map[nums[l]] == 0:
                    del hash_map[nums[l]]
                l += 1

            if r - l + 1 == num_of_ones:
                count_zeros = hash_map[0]
                min_count = min(min_count, count_zeros)
                
        return min_count
