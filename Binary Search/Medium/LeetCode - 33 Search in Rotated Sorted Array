
############################################################ Method 1 #################################################

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l = 0
        r = len(nums) - 1

        while l <= r:
            mid = (l + r)//2
            if nums[mid] == target:
                return mid
            if nums[l] <= nums[mid]:
                if nums[l] <= target <= nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            else:
                if nums[mid] <= target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return -1

############################################################ Method 2 #################################################

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        n = len(nums) - 1
        l = 0
        r = n

        while l < r:
            mid = (l + r)//2
            if nums[mid] > nums[r]:
                l = mid + 1
            else:
                r = mid
        min_val = nums[l]
        min_index = l     # Find min value first then set the left and right
       
        if min_index == 0:
            l = 0
            r = n

        elif target >= nums[0] and target <= nums[min_index - 1]:
            l = 0
            r = min_index  - 1
        else:
            l = min_index
            r = n
        
        while l <= r:
            mid = (l + r)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                r = mid - 1
            else:
                l = mid + 1
        return -1
