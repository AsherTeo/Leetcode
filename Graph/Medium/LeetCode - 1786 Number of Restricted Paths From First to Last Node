class Solution:
    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:
        mod = 10**9 + 7
        
        graph = defaultdict(list)

        for u, v, w in edges:
            graph[u].append((v,w))
            graph[v].append((u,w))

        shortest = {}
        
        
        min_heap = [(0, n)]
        visited = set()

        while min_heap:
            cost, node = heapq.heappop(min_heap)

            if node in visited:
                continue

            visited.add((node))

            shortest[node] = cost

            for nei, cur_cost in graph[node]:
                heapq.heappush(min_heap, (cur_cost + cost, nei))

        seen = set()
        memo = {}

        def dfs(node):
            if node in memo:
                return memo[node]

            if node == n:
                return 1

            if node in seen:
                return 0

            seen.add(node)

            total = 0
            for nei, cost in graph[node]:
                if shortest[node] <= shortest[nei]:
                    continue
                total += dfs(nei) 

            memo[node] = total % mod
            seen.remove(node)
            
            return memo[node] 

        return dfs(1)
