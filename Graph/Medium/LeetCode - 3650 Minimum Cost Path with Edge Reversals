class Solution:
    def minCost(self, n: int, edges: List[List[int]]) -> int:
        
        graph = defaultdict(list)

        for u, v, w in edges:
            graph[u].append((v, w))
            graph[v].append((u, w * 2))
        
        min_heap = [(0, 0)]
        visited = set()

        while min_heap:

            cost, node = heapq.heappop(min_heap)

            if node in visited:
                continue

            visited.add(node)

            if node == n - 1:
                return cost

            for nei, cur_cost in graph[node]:
                if nei not in visited:
                    heapq.heappush(min_heap, (cost + cur_cost, nei))

        return -1
