class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        
        graph = defaultdict(list)

        for u, v, cost in times:
            graph[u].append((v, cost))

        min_heap = [(0, k)]
        visited = set()

        while min_heap:
            
            cost, node = heapq.heappop(min_heap)
            
            if node in visited:
                continue
            
            visited.add(node)
            
            if len(visited) == n:
                return cost

            for nei, curr_cost in graph[node]:
                heapq.heappush(min_heap, (curr_cost + cost, nei))
        return -1
